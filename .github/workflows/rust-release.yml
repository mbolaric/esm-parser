# name: Cross-Platform Release

# on:
#   push:
#     tags:
#       - "v[0-9]+.[0-9]+.[0-9]+"

# jobs:
#   build:
#     name: Build examples for ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         include:
#           - os: ubuntu-latest
#             target: x86_64-unknown-linux-gnu
#             executable_suffix: ""
#           # - os: macos-latest
#           #   target: x86_64-apple-darwin
#           #   executable_suffix: ""
#           # - os: macos-latest
#           #   target: aarch64-apple-darwin
#           #   executable_suffix: ""
#           # - os: windows-latest
#           #   target: x86_64-pc-windows-msvc
#           #   executable_suffix: ".exe"

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # - name: Create empty Changes.md
#       #   run: touch Changes.md

#       - name: Install Rust toolchain
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           targets: ${{ matrix.target }}

#       - name: Build examples
#         run: |
#           cargo build --example esm2json --release --target ${{ matrix.target }}
#           cargo build --example esm2xml --release --target ${{ matrix.target }}

#       - name: Package artifacts
#         run: |
#           mkdir -p artifacts
#           cp target/${{ matrix.target }}/release/examples/esm2json${{ matrix.executable_suffix }} artifacts/
#           cp target/${{ matrix.target }}/release/examples/esm2xml${{ matrix.executable_suffix }} artifacts/
#           cp README.md artifacts/
#           cp LICENSE artifacts/
#         if: runner.os != 'Windows'
#       - name: Package artifacts (Windows)
#         run: |
#           mkdir artifacts
#           copy target\${{ matrix.target }}\release\examples\esm2json${{ matrix.executable_suffix }} artifacts\
#           copy target\${{ matrix.target }}\release\examples\esm2xml${{ matrix.executable_suffix }} artifacts\
#           copy README.md artifacts\
#           copy LICENSE artifacts\
#         if: runner.os == 'Windows'

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: release-artifacts-${{ matrix.os }}
#           path: artifacts/

#   release:
#     name: Release
#     needs: build
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write # This is the line that fixes the error
#     steps:
#       - name: Download all artifacts
#         uses: actions/download-artifact@v4

#       - name: Create Release
#         uses: softprops/action-gh-release@v2
#         with:
#           files: |
#             release-artifacts-ubuntu-latest/*
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
# release-artifacts-macos-latest/*
# release-artifacts-windows-latest/*

name: Cross-Platform Release

permissions:
  contents: write # allows creating releases and uploading assets

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Trigger when you push a tag like v1.0.0

jobs:
  build:
    name: Build examples for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   suffix: macos-x86_64
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   suffix: macos-arm64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   suffix: windows.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build all examples
        run: |
          for ex in $(ls examples/esm2*.rs); do
            name=$(basename $ex .rs)
            cargo build --release --target ${{ matrix.target }} --example $name
          done
        shell: bash

      - name: Package artifacts
        run: |
          mkdir artifacts
          VERSION=${GITHUB_REF_NAME}

          # Collect binaries
          for ex in $(ls examples/esm2*.rs); do
            name=$(basename $ex .rs)
            bin=target/${{ matrix.target }}/release/examples/$name${{ endsWith(matrix.suffix, '.exe') && '.exe' || '' }}
            cp "$bin" artifacts/
          done

          cd artifacts

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell.exe -Command "Compress-Archive -Path * -DestinationPath examples-${VERSION}-${{ matrix.suffix }}.zip"
          else
            tar czf examples-${VERSION}-${{ matrix.suffix }}.tar.gz *
          fi
          cd ..
        shell: bash

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{ matrix.suffix }}
          path: artifacts/*.tar.gz,artifacts/*.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts-ubuntu-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
