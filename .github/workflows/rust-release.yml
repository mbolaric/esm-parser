name: Cross-Platform Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-release:
    name: Build examples for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   suffix: macos-x86_64
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   suffix: macos-arm64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   suffix: windows.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build esm2json
        run: cargo build --example esm2json --release --target ${{ matrix.target }}

      - name: Package and upload esm2json
        uses: houseabsolute/actions-rust-release@v1
        with:
          executable-path: "./target/${{ matrix.target }}/release/examples/esm2json${{ matrix.executable_suffix }}"
          executable-name: "esm2json${{ matrix.executable_suffix }}"
          github-token: ${{ secrets.PAT_TOKEN }}
          target: ${{ matrix.target }}
          archive-includes: "README.md, LICENSE"

      - name: Build esm2xml
        run: cargo build --example esm2xml --release --target ${{ matrix.target }}

      - name: Package and upload esm2xml
        uses: houseabsolute/actions-rust-release@v1
        with:
          executable-path: "./target/${{ matrix.target }}/release/examples/esm2xml${{ matrix.executable_suffix }}"
          executable-name: "esm2xml${{ matrix.executable_suffix }}"
          github-token: ${{ secrets.PAT_TOKEN }}
          target: ${{ matrix.target }}
          archive-includes: "README.md, LICENSE"
# name: Cross-Platform Release

# permissions:
#   contents: write # allows creating releases and uploading assets

# on:
#   push:
#     tags:
#       - "v*.*.*" # Trigger when you push a tag like v1.0.0

# jobs:
#   build:
#     name: Build examples for ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         include:
#           - os: ubuntu-latest
#             target: x86_64-unknown-linux-gnu
#             suffix: linux
#           # - os: macos-latest
#           #   target: x86_64-apple-darwin
#           #   suffix: macos-x86_64
#           # - os: macos-latest
#           #   target: aarch64-apple-darwin
#           #   suffix: macos-arm64
#           # - os: windows-latest
#           #   target: x86_64-pc-windows-msvc
#           #   suffix: windows.exe

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Install Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           targets: ${{ matrix.target }}

#       - name: Build all examples
#         run: |
#           for ex in $(ls examples/esm2*.rs); do
#             name=$(basename $ex .rs)
#             cargo build --release --target ${{ matrix.target }} --example $name
#           done
#         shell: bash

#       - name: Package artifacts
#         run: |
#           mkdir package
#           VERSION=${GITHUB_REF_NAME}

#           # Collect binaries
#           for ex in $(ls examples/esm2*.rs); do
#             name=$(basename $ex .rs)
#             bin=target/${{ matrix.target }}/release/examples/$name${{ endsWith(matrix.suffix, '.exe') && '.exe' || '' }}
#             cp "$bin" package/
#           done

#           cd package

#           if [[ "$RUNNER_OS" == "Windows" ]]; then
#             powershell.exe -Command "Compress-Archive -Path * -DestinationPath examples-${VERSION}-${{ matrix.suffix }}.zip"
#           else
#             tar czf examples-${VERSION}-${{ matrix.suffix }}.tar.gz *
#           fi
#           cd ..
#         shell: bash

#       - name: Upload archive
#         uses: actions/upload-artifact@v4
#         with:
#           name: examples-${{ matrix.suffix }}
#           path: package/*

#   release:
#     name: Create Release
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts

#       - name: List files
#         run: ls -R artifacts

#       - name: Delete old release if exists
#         run: |
#           VERSION=${GITHUB_REF_NAME}
#           if gh release view "$VERSION" >/dev/null 2>&1; then
#             gh release delete "$VERSION" --yes
#             git push origin :refs/tags/$VERSION || true
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v2
#         with:
#           files: artifacts/**/*
#           fail_on_unmatched_files: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
