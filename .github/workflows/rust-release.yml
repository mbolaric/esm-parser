name: Cross-Platform Release

permissions:
  contents: write # allows creating releases and uploading assets

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Trigger when you push a tag like v1.0.0
  workflow_dispatch: # Allow manual runs (for local testing with act or GH UI)
    inputs:
      version:
        description: "Version to release"
        required: true
        default: "v0.0.0-test"

env:
  VERSION: ${{ github.event.inputs.version || github.ref_name }}

jobs:
  build:
    name: Build examples for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
            suffix: wasm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install wasm-bindgen (only for wasm)
        if: matrix.target == 'wasm32-unknown-unknown'
        run: cargo install wasm-pack

      - name: Build all examples
        run: |
          if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            wasm-pack build --target web --release
          else
            for ex in $(ls examples/esm2*.rs); do
              name=$(basename $ex .rs)
              cargo build --release --target ${{ matrix.target }} --example $name
            done
          fi
        shell: bash

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          VERSION=${GITHUB_REF_NAME}

          # Collect binaries into a temp folder
          if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            mkdir -p wasm_bins
            cp -r pkg/* wasm_bins/
            tarfile="esm-parser-${VERSION}-${{ matrix.suffix }}.tar.gz"
            tar czf "artifacts/$tarfile" -C wasm_bins .
          else
            mkdir -p build_bins
            for ex in $(ls examples/esm2*.rs); do
              name=$(basename $ex .rs)
              bin=target/${{ matrix.target }}/release/examples/$name${{ matrix.suffix == 'windows' && '.exe' || '' }}
              cp "$bin" build_bins/
            done

            # Package
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              zipfile="examples-${VERSION}-${{ matrix.suffix }}.zip"
              powershell.exe -Command "Compress-Archive -Path build_bins\\* -DestinationPath artifacts\\$zipfile"
            else
              tarfile="examples-${VERSION}-${{ matrix.suffix }}.tar.gz"
              tar czf "artifacts/$tarfile" -C build_bins .
            fi
          fi
        shell: bash

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.target }}
          path: artifacts/*
          if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Delete old release if exists
        run: gh release delete ${{ github.ref_name }} -y || true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/*.tar.gz,artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
